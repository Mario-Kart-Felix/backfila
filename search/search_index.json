{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Backfila \u00b6 Backfila is a service that manages backfill state, calling into other services to do batched work. Note: some instructions here are out of date Building \u00b6 Build backfila: $ ./gradlew clean shadowJar Run the Service \u00b6 From the command line \u00b6 $ java -jar service/build/libs/service.jar From IntelliJ \u00b6 Right-click on BackfilaService.kt and select Run From Docker \u00b6 Building \u00b6 Build a Docker image of backfila: $ docker build -t backfila-0.0.1 service Running locally \u00b6 Visit Docker for Mac to install Docker on a Mac for testing. Run backfila in Docker locally: $ docker run -p 8080:8080 backfila-0.0.1 Visit the UI at http://localhost:8080/ Client \u00b6 The backfila client must be installed in your services to expose their backfill code. It also provides the batching mechanism and templates for common types of backfills. Connectors \u00b6 Connectors can be installed to provide a way to connect to your services. The included default connectors are HTTPS and Envoy. Add custom connectors using Guice map binding. Gradle \u00b6 implementation ( \"app.cash.backfila:backfila-client:0.1.0\" ) implementation ( \"app.cash.backfila:backfila-service-lib:0.1.0\" ) License \u00b6 Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#backfila","text":"Backfila is a service that manages backfill state, calling into other services to do batched work. Note: some instructions here are out of date","title":"Backfila"},{"location":"#building","text":"Build backfila: $ ./gradlew clean shadowJar","title":"Building"},{"location":"#run-the-service","text":"","title":"Run the Service"},{"location":"#from-the-command-line","text":"$ java -jar service/build/libs/service.jar","title":"From the command line"},{"location":"#from-intellij","text":"Right-click on BackfilaService.kt and select Run","title":"From IntelliJ"},{"location":"#from-docker","text":"","title":"From Docker"},{"location":"#building_1","text":"Build a Docker image of backfila: $ docker build -t backfila-0.0.1 service","title":"Building"},{"location":"#running-locally","text":"Visit Docker for Mac to install Docker on a Mac for testing. Run backfila in Docker locally: $ docker run -p 8080:8080 backfila-0.0.1 Visit the UI at http://localhost:8080/","title":"Running locally"},{"location":"#client","text":"The backfila client must be installed in your services to expose their backfill code. It also provides the batching mechanism and templates for common types of backfills.","title":"Client"},{"location":"#connectors","text":"Connectors can be installed to provide a way to connect to your services. The included default connectors are HTTPS and Envoy. Add custom connectors using Guice map binding.","title":"Connectors"},{"location":"#gradle","text":"implementation ( \"app.cash.backfila:backfila-client:0.1.0\" ) implementation ( \"app.cash.backfila:backfila-service-lib:0.1.0\" )","title":"Gradle"},{"location":"#license","text":"Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 0.1.1 (2020-03-27) \u00b6 Paginated backfills page. View logs link. Version 0.1.0 (2019-09-01) \u00b6 Initial release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-011-2020-03-27","text":"Paginated backfills page. View logs link.","title":"Version 0.1.1 (2020-03-27)"},{"location":"changelog/#version-010-2019-09-01","text":"Initial release.","title":"Version 0.1.0 (2019-09-01)"},{"location":"contributing/","text":"Contributing \u00b6 If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"releasing/","text":"Releasing \u00b6 Prerequisite: Sonatype (Maven Central) Account \u00b6 Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for backfila projects. Prerequisite: GPG Keys \u00b6 Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX Prerequisite: Gradle Properties \u00b6 Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg Cutting a Release \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"backfila:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"backfila:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` miskweb ci-build -e ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a backfila-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for backfila projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing/#prerequisite-gpg-keys","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX","title":"Prerequisite: GPG Keys"},{"location":"releasing/#prerequisite-gradle-properties","text":"Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Prerequisite: Gradle Properties"},{"location":"releasing/#cutting-a-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"backfila:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"backfila:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` miskweb ci-build -e ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a backfila-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Cutting a Release"}]}